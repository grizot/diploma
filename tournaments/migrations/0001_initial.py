# Generated by Django 2.2.2 on 2020-04-21 09:53

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import image_cropping.fields
import tournaments.models
import tournaments.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('information', '0006_auto_20200421_1253'),
    ]

    operations = [
        migrations.CreateModel(
            name='AwardsType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default='', max_length=301, verbose_name='Название награды')),
            ],
            options={
                'verbose_name': 'Тип Индивидуальной награды',
                'verbose_name_plural': 'Типы Индивидуальных наград',
            },
        ),
        migrations.CreateModel(
            name='Competitor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Количество очков')),
                ('place', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Место в турнире')),
            ],
            options={
                'verbose_name': 'Участник соревнований',
                'verbose_name_plural': 'Участники соревнований',
            },
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('homeGoals', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Забито домашней командой')),
                ('awayGoals', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Забито гостевой командой')),
                ('homePenalty', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Забито домашней командой(пен)')),
                ('awayPenalty', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Забито гостевой командой(пен)')),
                ('result', models.CharField(choices=[('1', 'Победа хозяев'), ('=', 'Ничья'), ('2', 'Победа гостей'), ('+', 'Победа хозяев(пен)'), ('-', 'Победа гостей(пен)')], max_length=25, verbose_name='Результат')),
                ('away', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='awaygames', to='tournaments.Competitor', verbose_name='Гостевая команда')),
                ('home', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='homegames', to='tournaments.Competitor', verbose_name='Домашняя команда')),
            ],
            options={
                'verbose_name': 'Игра',
                'verbose_name_plural': 'Игры',
            },
        ),
        migrations.CreateModel(
            name='Rules',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default='', max_length=201, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Правила',
                'verbose_name_plural': 'Правила',
            },
        ),
        migrations.CreateModel(
            name='Tournament',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default='', max_length=300, verbose_name='Название')),
                ('imageOld', models.ImageField(default='', upload_to=tournaments.models.Tournament.user_directory_path, validators=[tournaments.validators.validate_image], verbose_name='Лого')),
                ('image', image_cropping.fields.ImageRatioField('imageOld', '300x300', adapt_rotation=False, allow_fullsize=False, free_crop=False, help_text='Выберите область для отображения лого', hide_image_field=False, size_warning=True, verbose_name='')),
                ('start', models.DateField(default=django.utils.timezone.now, verbose_name='Начало турнира')),
                ('end', models.DateField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='Окончание турнира')),
                ('address', models.CharField(blank=True, default='', max_length=300, verbose_name='Место проведения')),
                ('map', models.CharField(blank=True, default='', max_length=1501, verbose_name='Ссылка на яндекс-карту')),
                ('champion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='information.Team', verbose_name='Чемпион')),
                ('rules', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournaments.Rules', verbose_name='Правила')),
            ],
            options={
                'verbose_name': 'Турнир',
                'verbose_name_plural': 'Турниры',
                'ordering': ['title', '-start'],
            },
        ),
        migrations.CreateModel(
            name='StatsPlayer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('matches', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Игры')),
                ('goals', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Голы')),
                ('assists', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Голевые передачи')),
                ('yellowcards', models.PositiveIntegerField(default=0, verbose_name='Желтые карточки')),
                ('redcards', models.PositiveIntegerField(default=0, verbose_name='Красные карточки')),
                ('id_fk', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='statsplayers', to='tournaments.Competitor')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='information.Player', verbose_name='Игрок')),
            ],
            options={
                'verbose_name': 'Статистика Игрока',
                'verbose_name_plural': 'Статистики игроков',
            },
        ),
        migrations.CreateModel(
            name='Stage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('groups', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Количество групп')),
                ('next', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Количество команд, выходящих далее')),
                ('yellowcards', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Количество желтых карточек, необходимых для дискалификации')),
                ('matches', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Количество матчей, пропускаемых дисквалифицированным игроком')),
                ('customOrder', models.PositiveIntegerField(default=0, verbose_name='Перетащите на нужное место')),
                ('type', models.CharField(choices=[('G', 'Чемпионат'), ('C', 'Кубок')], default='Чемпионат', max_length=25, verbose_name='Тип стадии')),
                ('id_fk', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stages', to='tournaments.Rules')),
            ],
            options={
                'verbose_name': 'Стадия',
                'verbose_name_plural': 'Стадии',
                'ordering': ['customOrder'],
            },
        ),
        migrations.CreateModel(
            name='Round',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Номер тура')),
                ('stage', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournaments.Stage', verbose_name='Стадия')),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournaments.Tournament', verbose_name='Турнир')),
            ],
            options={
                'verbose_name': 'Тур',
                'verbose_name_plural': 'Туры',
            },
        ),
        migrations.CreateModel(
            name='Protocol',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_fk', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='protocols', to='tournaments.Game')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournaments.StatsPlayer', verbose_name='Игрок')),
            ],
            options={
                'verbose_name': 'Протокол',
                'verbose_name_plural': 'Протоколы',
            },
        ),
        migrations.CreateModel(
            name='Organizer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.CharField(default='', max_length=101, verbose_name='Ссылка')),
                ('customOrder', models.PositiveIntegerField(default=0, verbose_name='Перетащите на нужное место')),
                ('imageOld', models.ImageField(blank=True, default='', upload_to=tournaments.models.Organizer.user_directory_path, validators=[tournaments.validators.validate_image], verbose_name='Картинка')),
                ('image', image_cropping.fields.ImageRatioField('imageOld', '50x50', adapt_rotation=False, allow_fullsize=False, free_crop=False, help_text='Выберите область для отображения картинки', hide_image_field=False, size_warning=True, verbose_name='Отображение картинки')),
                ('id_fk', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='organizers', to='tournaments.Tournament')),
            ],
            options={
                'verbose_name': 'Организатор',
                'verbose_name_plural': 'Организаторы',
                'ordering': ['customOrder'],
            },
        ),
        migrations.CreateModel(
            name='Goal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('minute', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Минута')),
                ('assist', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tournaments.StatsPlayer', verbose_name='Ассистент')),
                ('id_fk', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='goals', to='tournaments.Protocol')),
            ],
            options={
                'verbose_name': 'Действие',
                'verbose_name_plural': 'Действия',
            },
        ),
        migrations.AddField(
            model_name='game',
            name='round',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournaments.Round', verbose_name='Тур'),
        ),
        migrations.AddField(
            model_name='competitor',
            name='id_fk',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='competitors', to='tournaments.Tournament'),
        ),
        migrations.AddField(
            model_name='competitor',
            name='team',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='information.Team', verbose_name='Команда'),
        ),
        migrations.CreateModel(
            name='Card',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('Y', 'Желтая карточка'), ('R', 'Красная карточка')], default='Желтая карточка', max_length=25, verbose_name='Тип карточки')),
                ('minute', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Минута')),
                ('id_fk', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cards', to='tournaments.Protocol')),
            ],
            options={
                'verbose_name': 'Действие',
                'verbose_name_plural': 'Действия',
            },
        ),
        migrations.CreateModel(
            name='Award',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.PositiveIntegerField(default=0, verbose_name='Количество действий')),
                ('id_fk', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='awards', to='tournaments.Tournament')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournaments.StatsPlayer', verbose_name='Игрок')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournaments.AwardsType', verbose_name='Тип награды')),
            ],
            options={
                'verbose_name': 'Индивидуальная награда',
                'verbose_name_plural': 'Индивидуальные награды',
            },
        ),
        migrations.AddIndex(
            model_name='tournament',
            index=models.Index(fields=['title'], name='tournaments_title_e13147_idx'),
        ),
    ]
